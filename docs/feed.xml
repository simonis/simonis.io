<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-03-30T20:37:29-05:00</updated><id>/feed.xml</id><title type="html">Volker Simonis</title><subtitle>Musings about OpenJDK and JVM technology.
</subtitle><author><name>Volker Simonis</name><email>volker.simonis@gmail.com</email></author><entry><title type="html">Releases unused heap memory back to the OS or How to make sense of all these numbers</title><link href="/blog/openjdk/uncommit.html" rel="alternate" type="text/html" title="Releases unused heap memory back to the OS or How to make sense of all these numbers" /><published>2021-07-15T00:00:00-05:00</published><updated>2021-07-15T00:00:00-05:00</updated><id>/blog/openjdk/uncommit</id><content type="html" xml:base="/blog/openjdk/uncommit.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The JVM has the ability to release unused heap memory back to the operating system. The exact details on how and when this happens depend on the selected garbage collection algorithm and can be controlled by various command line option. This blog explains how exactly releasing of memory works for SerialGC and explores the corresponding options. With the help of the built-in JVM supportability and logging facilities as well as with the help of native OS tools we will verify that the amount of virtual, committed and dirty memory of the JVM process behaves as expected.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;heap-basics&quot;&gt;Heap basics&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At startup the JVM determines values for the &lt;code&gt;InitialHeapSize&lt;/code&gt; and &lt;code&gt;MaxHeapSize&lt;/code&gt; based on the amount of system memory. These values can be inspected with &lt;code&gt;-XX:+PrintFlagsFinal&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;java &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:+UseSerialGC &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:+PrintFlagsFinal &lt;span class=&quot;nt&quot;&gt;-version&lt;/span&gt; | egrep &lt;span class=&quot;s1&quot;&gt;'(InitialHeapSize|MaxHeapSize)'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;   size_t InitialHeapSize           = 524288000                  {product} {ergonomic}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;   size_t MaxHeapSize               = 8380219392                 {product} {ergonomic}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;They can be overridden on the command line. If we want to start with 100m initial heap and not grow beyond 1g we can specify the following options:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;java &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:+UseSerialGC &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:+PrintFlagsFinal &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:InitialHeapSize&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100m &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:MaxHeapSize&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1g &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;       &lt;span class=&quot;nt&quot;&gt;-version&lt;/span&gt; | egrep &lt;span class=&quot;s1&quot;&gt;'(InitialHeapSize|MaxHeapSize)'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;   size_t InitialHeapSize           = 104857600                  {product} {command line}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;   size_t MaxHeapSize               = 1073741824                 {product} {command line}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The JVM also has the notion of a minimum heap size which can be set with the &lt;code&gt;-Xms&lt;/code&gt; command line option. &lt;code&gt;-Xms&lt;/code&gt; will actually set both, the minimum and the initial heap size to the same value. But is also has some peculiarities: if you set both &lt;code&gt;-Xms&lt;/code&gt; and &lt;code&gt;-XX:InitialHeapSize&lt;/code&gt; and &lt;code&gt;-Xms&lt;/code&gt; comes first on the command line than &lt;code&gt;sXms&lt;/code&gt; will set the minimum and &lt;code&gt;-XX:InitialHeapSize&lt;/code&gt; the initial heap size. If &lt;code&gt;-Xms&lt;/code&gt; comes second, it will set both, the minimum and the initial heap size to the same value and override the effect of the &lt;code&gt;-XX:InitialHeapSize&lt;/code&gt; option. To overcome this situation and make it possible to reliably and independently set both, the minimum and the initial heap size, jdk13 has introduced the new &lt;code&gt;-XX:MinHeapSize&lt;/code&gt; flag (see &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8223837&quot;&gt;JDK-8223837: Add -XX:MinHeapSize flag to set the minimum heap size&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;serial-gc&quot;&gt;Serial GC&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For SerialGC, &lt;code&gt;InitialHeapSize&lt;/code&gt; and &lt;code&gt;MaxHeapSize&lt;/code&gt; determine the overall size of the heap (setting &lt;code&gt;-Xms&lt;/code&gt; to a lower value than &lt;code&gt;InitialHeapSize&lt;/code&gt; has no effect for SerialGC because the heap will never shrink below &lt;code&gt;InitialHeapSize&lt;/code&gt;). The &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/gctuning/factors-affecting-garbage-collection-performance.html&quot;&gt;SerialGC heap&lt;/a&gt; is subdivided in the New (aka. Young) and the Old (aka. &quot;Tenured&quot;) generation. The New generation is further subdivided into the three Eden, From and To spaces. We can see these spaces for each GC cycle when we enable GC logging with &lt;code&gt;-Xlog:gc+heap&lt;/code&gt;. For the remainder of this blog we will use the simple &lt;a href=&quot;https://github.com/simonis/Memory/blob/master/examples/java/Uncommit.java&quot;&gt;&lt;code&gt;Uncommit.java&lt;/code&gt;&lt;/a&gt; example program which first allocates a configurable amount of data and then calls &lt;code&gt;System.gc()&lt;/code&gt; several times after the data has been freed. It also calls &lt;code&gt;System.gc()&lt;/code&gt; right after invoking the &lt;code&gt;main()&lt;/code&gt; function, to get a baseline for our application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;java &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:+UseSerialGC &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:InitialHeapSize&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;mark&gt;100m&lt;/mark&gt; &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:MaxHeapSize&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1g &lt;span class=&quot;nt&quot;&gt;-Xlog&lt;/span&gt;:gc+heap&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;trace::none &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;       Uncommit
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calling System.gc()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0) Heap before GC invocations=0 (full 0):&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0)  def new generation   total &lt;mark&gt;30720K&lt;/mark&gt;, used 2733K [&lt;mark class=&quot;level1&quot;&gt;0x00000000c0000000&lt;/mark&gt;, &lt;mark class=&quot;level1&quot;&gt;0x00000000c2150000&lt;/mark&gt;, &lt;mark class=&quot;level2&quot;&gt;0x00000000d5550000&lt;/mark&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0)   eden space &lt;mark&gt;27328K&lt;/mark&gt;,  10% used [0x00000000c0000000, 0x00000000c02ab448, 0x00000000c1ab0000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0)   from space &lt;mark&gt;3392K&lt;/mark&gt;,   0% used [0x00000000c1ab0000, 0x00000000c1ab0000, 0x00000000c1e00000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0)   to   space 3392K,   0% used [0x00000000c1e00000, 0x00000000c1e00000, 0x00000000c2150000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0)  tenured generation   total &lt;mark&gt;68288K&lt;/mark&gt;, used 0K [&lt;mark class=&quot;level2&quot;&gt;0x00000000d5550000&lt;/mark&gt;, &lt;mark class=&quot;level2&quot;&gt;0x00000000d9800000&lt;/mark&gt;, &lt;mark class=&quot;level2&quot;&gt;0x0000000100000000&lt;/mark&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0)    the space 68288K,   0% used [0x00000000d5550000, 0x00000000d5550000, 0x00000000d5550200, 0x00000000d9800000)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before this very first GC Eden and From sum up to New (i.e. &lt;mark&gt;27328k&lt;/mark&gt; + &lt;mark&gt;3392k&lt;/mark&gt; == &lt;mark&gt;30720k&lt;/mark&gt;) and New plus Tenured plus To sum up to InitialHeapSize (i.e. &lt;mark&gt;30720k&lt;/mark&gt; + &lt;mark&gt;68288k&lt;/mark&gt; + 3392k == 102400k == &lt;mark&gt;100m&lt;/mark&gt;). Notice how the size of New is given as 30720 which only includes Eden and From because out of From and To only one will be active at any given time. In reality, New occupies 34112k (i.e. Eden + From + To) and this can be easily computed from (&lt;mark class=&quot;level1&quot;&gt;0x00000000c2150000&lt;/mark&gt; - &lt;mark class=&quot;level1&quot;&gt;0x00000000c0000000&lt;/mark&gt;) / 1024. 0x00000000c0000000 is the starting address of New and 0x00000000c2150000 is the end address of its currently active part (i.e. the initially committed part). The maximum reserved size of New is 349504k and it goes from 0x00000000c0000000 to 0x00000000d5550000.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For Tenured, the currently active (i.e. committed) part has a size of 68288K (from &lt;mark class=&quot;level2&quot;&gt;0x00000000d5550000&lt;/mark&gt; to &lt;mark class=&quot;level2&quot;&gt;0x00000000d9800000&lt;/mark&gt;) while its reserved size (i.e. 699072k) starts at 0x00000000d5550000 and ends at &lt;mark class=&quot;level2&quot;&gt;0x0000000100000000&lt;/mark&gt;. The reserved sizes for New and Tenured sum up to MaxHeapSize (i.e. 349504k + 699072k == 1048576k == 1g).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;New occupies ~33% (i.e. 349504k / 1048576k == 0.33) and Tenured ~66% (i.e. 699072k / 1048576k == 0.66) of the total reserved heap which corresponds to an Old/New ratio of 2 as specified by the default value for &lt;code&gt;-XX:NewRatio&lt;/code&gt;. This is also the ratio of the initially committed parts of New and Tenured (i.e. &lt;mark&gt;34112k&lt;/mark&gt; / 102400k == 0.33 for New and &lt;mark&gt;68288k&lt;/mark&gt; / 102400k == 0.66 for Tenured).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;GC(0) New generation size &lt;mark&gt;34112K&lt;/mark&gt;-&amp;gt;34176K [eden=27392K,survivor=3392K]
GC(0)   [&lt;mark class=&quot;level1&quot;&gt;allowed 5K extra for 1 threads&lt;/mark&gt;]
GC(0) DefNew: 2733K(30720K)-&amp;gt;0K(30784K) Eden: 2733K(27328K)-&amp;gt;0K(27392K) From: 0K(3392K)-&amp;gt;0K(3392K)
GC(0) Tenured: 0K(&lt;mark&gt;68288K&lt;/mark&gt;)-&amp;gt;689K(68288K)
GC(0) Heap after GC invocations=1 (full 1):
GC(0)  def new generation   total 30784K, used 0K [0x00000000c0000000, 0x00000000c2160000, 0x00000000d5550000)
GC(0)   eden space 27392K,   0% used [0x00000000c0000000, 0x00000000c0000000, 0x00000000c1ac0000)
GC(0)   from space 3392K,   0% used [0x00000000c1ac0000, 0x00000000c1ac0000, 0x00000000c1e10000)
GC(0)   to   space 3392K,   0% used [0x00000000c1e10000, 0x00000000c1e10000, 0x00000000c2160000)
GC(0)  tenured generation   total 68288K, used 689K [0x00000000d5550000, 0x00000000d9800000, 0x0000000100000000)
GC(0)    the space 68288K,   1% used [0x00000000d5550000, 0x00000000d55fc4c0, 0x00000000d55fc600, 0x00000000d9800000)
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, after the first full GC, the size of New will be adjusted to accommodate the number of Java threads (1 in our case). Notice that as of the writing of this blog, a stock OpenJDK will always prints &lt;code&gt;&lt;mark class=&quot;level1&quot;&gt;&quot;allow 0k extra for 0 threads&quot;&lt;/mark&gt;&lt;/code&gt;. This logging error will be fixed by &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8270100&quot;&gt;JDK-8270100&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To simplify further analysis we can disable this resizing by setting &lt;code&gt;-XX:NewSizeThreadIncrease&lt;/code&gt; to 0. We also set &lt;code&gt;-XX:NativeMemoryTracking=summary&lt;/code&gt; so we can use &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/vm/native-memory-tracking.html&quot;&gt;Native Memory Tracking&lt;/a&gt; (NMT) to verify the GC log output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;java &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:+UseSerialGC &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:InitialHeapSize&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100m &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:MaxHeapSize&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1g &lt;span class=&quot;nt&quot;&gt;-Xlog&lt;/span&gt;:gc+heap&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;trace::none &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;       &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:NewSizeThreadIncrease&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:NativeMemoryTracking&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;summary Uncommit
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0) DefNew: 2733K(30720K)-&amp;gt;0K(30720K) Eden: 2733K(27328K)-&amp;gt;0K(27328K) From: 0K(3392K)-&amp;gt;0K(3392K)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0) Tenured: 0K(68288K)-&amp;gt;733K(68288K)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0) Heap after GC invocations=1 (full 1):&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0)  def new generation   total 30720K, used 0K [0x00000000c0000000, 0x00000000c2150000, 0x00000000d5550000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0)   eden space 27328K,   0% used [0x00000000c0000000, 0x00000000c0000000, 0x00000000c1ab0000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0)   from space 3392K,   0% used [0x00000000c1ab0000, 0x00000000c1ab0000, 0x00000000c1e00000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0)   to   space 3392K,   0% used [0x00000000c1e00000, 0x00000000c1e00000, 0x00000000c2150000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0)  tenured generation   total 68288K, used 733K [0x00000000d5550000, 0x00000000d9800000, 0x0000000100000000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0)    the space 68288K,   1% used [0x00000000d5550000, 0x00000000d56074d0, 0x00000000d5607600, 0x00000000d9800000)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&lt;mark&gt;VmRSS:	   40772 kB&lt;/mark&gt;&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Press &amp;lt;Enter&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Every time after the application calls &lt;code&gt;System.gc()&lt;/code&gt; it will report the amount of memory it consumes as &lt;mark&gt;`VmRSS`&lt;/mark&gt; (based on data gathered from &lt;code&gt;/proc/self/status&lt;/code&gt;) and wait for user input in order to give us a chance to analyze it with external tools. The NMT information for our application confirms the reserved (i.e.&lt;mark&gt;1048576k&lt;/mark&gt; == 1g) and committed (i.e. &lt;mark&gt;102400k&lt;/mark&gt; == 100m) heap sizes we&amp;#8217;ve calculated from the GC log before:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;jcmd Uncommit VM.native_memory
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;-                 Java Heap (reserved=&lt;mark&gt;1048576KB&lt;/mark&gt;, committed=&lt;mark&gt;102400KB&lt;/mark&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;                            (mmap: reserved=1048576KB, committed=102400KB)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But unfortunately, on Linux &quot;committed&quot; doesn&amp;#8217;t mean that a memory segment is backed up by real, physical memory until each of its pages was touched (i.e. written to) for the first time. This means that the corresponding pages won&amp;#8217;t show up in the so called &quot;resident set&quot; (i.e. RSS) of the process until they get touched. We can verify this with &lt;code&gt;pmap&lt;/code&gt; command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;pmap &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; 17126
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Address           Kbytes     RSS   Dirty Mode  Mapping&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;00000000c0000000   34112    1408    1408 rw---   [ anon ]    &lt;/span&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&lt;span class=&quot;go&quot;&gt;00000000c2150000  315392       0       0 -----   [ anon ]    &lt;/span&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
&lt;span class=&quot;go&quot;&gt;00000000d5550000   68288     736     736 rw---   [ anon ]    &lt;/span&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&lt;span class=&quot;go&quot;&gt;00000000d9800000  630784       0       0 -----   [ anon ]    &lt;/span&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
&lt;span class=&quot;go&quot;&gt;0000000800000000      12      12      12 rwx-- classes.jsa&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0000000800003000    4348    4052    3140 rw--- classes.jsa&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0000000800442000    7956    7632       0 r---- classes.jsa&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;---------------- ------- ------- -------&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;total kB         3470076   41820   14000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&quot;rw&quot; (i.e. read/write) mode means that the corresponding mapping has been committed while an empty mode indicates a virtual memory mapping which has only been reserved but not yet committed. &quot;RSS&quot; (i.e. resident set size) denotes the part of the corresponding mapping which is actually present in physical memory. If a virtual memory mapping is backed up by a file, the &quot;Mapping&quot; section contains the file name (e.g. &lt;code&gt;classes.jsa&lt;/code&gt; for the CDS, i.e. class data sharing archive). For the Java heap &lt;code&gt;[ anon ]&lt;/code&gt; indicates that it is an anonymous mapping. Finally, the &quot;Dirty&quot; column prints the amount of memory which has been changed with respect to the primary source of the mapping. For anonymous mappings like the Java heap, RSS is equal to Dirty but for file mappings like the CDS archive we can see that for writable sections some parts might still correspond to the original data in the file and Dirty &amp;lt;= RSS &amp;lt;= Kbytes. For read-only mappings, the application can&amp;#8217;t change the data so Dirty will always be zero (see these &lt;a href=&quot;https://simonis.github.io/JavaZone2018/CDS/cds.xhtml#/10/1&quot;&gt;slides&lt;/a&gt; and &lt;a href=&quot;https://vimeo.com/289644820#t=2789s&quot;&gt;presentation&lt;/a&gt; for more details about the CDS sections and layout).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the Java heap we can see that a slice of 34112k &lt;code class=&quot;callout&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/code&gt;(which is exactly the size of &quot;Eden + From + To&quot;) and another one of 68288k &lt;code class=&quot;callout&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/code&gt;(which corresponds to the size of Tenured) are committed while the remaining part of the heap &lt;code class=&quot;callout&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/code&gt;(315392k + 630784k == 946176k == 1048576k - 102400k == 1048576 - (34112k + 68288k)) is only reserved. The interesting and maybe surprising part of this itemization is the fact that out of the 102400k committed Java heap (as displayed by the GC log and NMT) only 2144k (i.e. 1408k + 736k) are initially mapped to physical memory and account for the process' RSS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is also interesting to see that for the old generation the RSS portion reported by &lt;code&gt;pmap&lt;/code&gt; corresponds exactly to the used part of that region as reported by the GC log if we align it to 4k pages  &lt;code class=&quot;callout&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/code&gt;(i.e. 736k == (733k + 4k) &amp;amp; 0xfff8). For the new generation the 1408k RSS as reported by &lt;code&gt;pmap&lt;/code&gt;  &lt;code class=&quot;callout&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/code&gt; is much smaller than the 2733k reported by the GC log as &quot;used&quot;. This difference is caused by a feature called &quot;thread local allocation buffer&quot; (TLAB) which is used to speed up allocations. It works by assigning each thread an own, private chunk of Eden such that it doesn&amp;#8217;t need to synchronize with other threads for each allocation. For the GC log, these parts of Eden count as &quot;used&quot;, although the threads owning them might not have filled them up (i.e. touched them) completely. If we run our sample application with &lt;code&gt;-XX:-UseTLAB&lt;/code&gt; we can see that the reported &quot;used&quot; size of &lt;mark&gt;1393k&lt;/mark&gt; for the new generation is much closer to the 1408k RSS as reported by &lt;code&gt;pmap&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;java &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:+UseSerialGC &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:InitialHeapSize&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100m &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:MaxHeapSize&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1g &lt;span class=&quot;nt&quot;&gt;-Xlog&lt;/span&gt;:gc+heap&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;trace::none &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;       &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:NewSizeThreadIncrease&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:NativeMemoryTracking&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;summary &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:-UseTLAB Uncommit
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0) Heap before GC invocations=0 (full 0):&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0)  def new generation   total 30720K, used &lt;mark&gt;1393K&lt;/mark&gt; [0x00000000c0000000, 0x00000000c2150000, 0x00000000d5550000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0)   eden space 27328K,   5% used [0x00000000c0000000, 0x00000000c015c6a8, 0x00000000c1ab0000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0)   from space 3392K,   0% used [0x00000000c1ab0000, 0x00000000c1ab0000, 0x00000000c1e00000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0)   to   space 3392K,   0% used [0x00000000c1e00000, 0x00000000c1e00000, 0x00000000c2150000)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The size of the TLAB is adaptive but can also be specified with the &lt;code&gt;-XX:TLABSize&lt;/code&gt; option. It defaults to zero which means that the initial size will be determined ergonomically. Unfortunately, this determined, initial size can only be logged in a debug build of the JVM with the command line option &lt;code&gt;-Xlog:tlab*=trace&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;java &lt;span class=&quot;nt&quot;&gt;-Xlog&lt;/span&gt;:tlab&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;trace &lt;span class=&quot;nt&quot;&gt;-version&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;[0.066s][trace][gc,tlab] TLAB min: 328 initial: 62914 max: 262144&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To sum it up, we can see that after the first &lt;code&gt;System.gc()&lt;/code&gt;, our Java process only uses ~40m of RSS (i.e. 41820k according to &lt;code&gt;pmap&lt;/code&gt; and 40772k according to &lt;code&gt;Uncommit&lt;/code&gt;s output). The Java heap only contributes 2144k (i.e. 1408k + 736k) to this amount.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;allocating-memory&quot;&gt;Allocating memory&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After pressing &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt;, the sample application will allocate 512 megabaytes in chunks of &lt;code&gt;int[256]&lt;/code&gt; arrays (the amount of allocated megabytes can be configured with the first command line argument). The allocations will trigger several implicit GCs and increase the committed heap to accommodate for the new data. After all the allocations have been satisfied, we get the following output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;GC(24) Heap after GC invocations=21 (full 5):
GC(24)  def new generation   total &lt;mark class=&quot;level1&quot;&gt;30720K&lt;/mark&gt;, used 3392K [0x00000000c0000000, 0x00000000c2150000, 0x00000000d5550000)
GC(24)   eden space &lt;mark&gt;27328K&lt;/mark&gt;,   0% used [0x00000000c0000000, 0x00000000c0000000, 0x00000000c1ab0000)
GC(24)   from space &lt;mark&gt;3392K&lt;/mark&gt;, 100% used [0x00000000c1ab0000, 0x00000000c1e00000, 0x00000000c1e00000)
GC(24)   to   space &lt;mark&gt;3392K&lt;/mark&gt;,   0% used [0x00000000c1e00000, 0x00000000c1e00000, 0x00000000c2150000)
GC(24)  tenured generation   total &lt;mark class=&quot;level2&quot;&gt;699072K&lt;/mark&gt;, used 530586K [0x00000000d5550000, 0x0000000100000000, 0x0000000100000000)
GC(24)    the space 699072K,  75% used [0x00000000d5550000, 0x00000000f5b76990, 0x00000000f5b76a00, 0x0000000100000000)
GC(24)  Metaspace       used 1066K, committed 1216K, reserved 1056768K
GC(24)   class space    used 101K, committed 192K, reserved 1048576K
Successfully allocated 512MB memory
VmRSS:	  605720 kB
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new generation is now using (i.e. has committed) 34112k (i.e. Eden + From + To == &lt;mark&gt;27328K&lt;/mark&gt; + &lt;mark&gt;3392K&lt;/mark&gt; + &lt;mark&gt;3392K&lt;/mark&gt; == &lt;mark class=&quot;level1&quot;&gt;30720K&lt;/mark&gt; + 3392K == 34112k) and the old generation is using &lt;mark class=&quot;level2&quot;&gt;699072k&lt;/mark&gt; which corresponds to its maximum size. These are the same numbers as reported by NMT (i.e. 699072k + 34112k == &lt;mark&gt;733184k&lt;/mark&gt;):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;-                 Java Heap (reserved=1048576KB, committed=&lt;mark&gt;733184KB&lt;/mark&gt;)
                            (mmap: reserved=1048576KB, committed=733184KB)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we are looking at the &lt;code&gt;pmap&lt;/code&gt; output, we&amp;#8217;ll see:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;Address           Kbytes     RSS   Dirty Mode  Mapping
00000000c0000000   34112   34112   34112 rw---   [ anon ]   &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
00000000c2150000  315392       0       0 -----   [ anon ]
00000000d5550000  699072  530588  530588 rw---   [ anon ]   &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
0000000800000000      12      12      12 rwx-- classes.jsa
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;---------------- ------- ------- -------
total kB         3536640  607048  579104                    &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Tenured generation is now fully committed and 530588k out of the total 699072k are mapped to physical memory &lt;code class=&quot;callout&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/code&gt;. From the young generation, 34112k out of 315392k are committed and mapped to physical memory &lt;code class=&quot;callout&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/code&gt;. These numbers correspond to the committed heap size reported by NMT (i.e. 699072k + 34112k == 733184k). The Java heap now contributes 564700k (i.e. 530588k + 34112k == 564700k) to the total of 607048k RSS &lt;code class=&quot;callout&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/code&gt; (or 605720 as reported by the application) consumed by the Java process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pressing &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; one more time, will unlink the allocated memory and make it available for reclamation by the GC:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;Successfully unlinked 512MB memory
VmRSS:	  605960 kB

Press &amp;lt;Enter&amp;gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Every subsequent press of &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; will trigger a new &lt;code&gt;System.gc()&lt;/code&gt;. The total number of system GCs is configurable as an optional, second command line parameter and defaults to 5. We will now take a look at the &lt;code&gt;CardGeneration::compute_new_size&lt;/code&gt; section in the log which we&amp;#8217;ve ignored until now:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code&gt;GC(25) Heap before GC invocations=21 (full 5):
GC(25)  def new generation   total 30720K, used 14935K [0x00000000c0000000, 0x00000000c2150000, 0x00000000d5550000)
GC(25)   eden space 27328K,  42% used [0x00000000c0000000, 0x00000000c0b45ec8, 0x00000000c1ab0000)
GC(25)   from space 3392K, 100% used [0x00000000c1ab0000, 0x00000000c1e00000, 0x00000000c1e00000)
GC(25)   to   space 3392K,   0% used [0x00000000c1e00000, 0x00000000c1e00000, 0x00000000c2150000)
GC(25)  tenured generation   total 699072K, used &lt;mark&gt;528963K&lt;/mark&gt; [0x00000000d5550000, 0x0000000100000000, 0x0000000100000000)
GC(25)    the space 699072K,  75% used [0x00000000d5550000, 0x00000000f59e0df8, 0x00000000f59e0e00, 0x0000000100000000)

&lt;span class=&quot;hll&quot;&gt;GC(25) CardGeneration::compute_new_size:
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(25)     minimum_free_percentage:   0,40  maximum_used_percentage:   0,60
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(25)      free_after_gc   : 671718,8K   used_after_gc   : &lt;mark class=&quot;level1&quot;&gt;27353,2K&lt;/mark&gt;   capacity_after_gc   : 699072,0K
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(25)      free_percentage:   0,96
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(25)     maximum_free_percentage:   0,70  minimum_used_percentage:   0,30
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(25)     _capacity_at_prologue: 699072,0K  minimum_desired_capacity: 68288,0K  maximum_desired_capacity: 91177,4K
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(25)     shrinking:  initSize: 68288,0K  maximum_desired_capacity: &lt;mark class=&quot;level2&quot;&gt;91177,4K&lt;/mark&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(25)     shrink_bytes: 0,0K  current_shrink_factor: 0  new shrink factor: 10  _min_heap_delta_bytes: 192,0K
&lt;/span&gt;
GC(25) DefNew: 14935K(30720K)-&amp;gt;0K(30720K) Eden: 11543K(27328K)-&amp;gt;0K(27328K) From: 3392K(3392K)-&amp;gt;0K(3392K)
GC(25) Tenured: &lt;mark&gt;528963K&lt;/mark&gt;(699072K)-&amp;gt;&lt;mark class=&quot;level1&quot;&gt;27353K&lt;/mark&gt;(699072K)

GC(25) Heap after GC invocations=22 (full 6):
GC(25)  def new generation   total 30720K, used 0K [0x00000000c0000000, 0x00000000c2150000, 0x00000000d5550000)
GC(25)   eden space 27328K,   0% used [0x00000000c0000000, 0x00000000c0000000, 0x00000000c1ab0000)
GC(25)   from space 3392K,   0% used [0x00000000c1ab0000, 0x00000000c1ab0000, 0x00000000c1e00000)
GC(25)   to   space 3392K,   0% used [0x00000000c1e00000, 0x00000000c1e00000, 0x00000000c2150000)
GC(25)  tenured generation   total 699072K, used &lt;mark class=&quot;level1&quot;&gt;27353K&lt;/mark&gt; [0x00000000d5550000, 0x0000000100000000, 0x0000000100000000)
GC(25)    the space 699072K,   3% used [0x00000000d5550000, 0x00000000d70064e0, 0x00000000d7006600, 0x0000000100000000)
Performed 1. System.gc()

VmRSS:	  603992 kB
Press &amp;lt;Enter&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This function gets called after each full GC to adjust the heap size between &lt;code&gt;InitialHeapSize&lt;/code&gt; and &lt;code&gt;MaxHeapSize&lt;/code&gt; if necessary. In addition to the initial and the maximum heap size it is controlled by the two parameters &lt;code&gt;MinHeapFreeRatio&lt;/code&gt; which denotes the minimum percentage of heap free after GC to avoid expansion and &lt;code&gt;MaxHeapFreeRatio&lt;/code&gt; which gives the maximum percentage of heap free after GC to avoid shrinking. For SerialGC the latter two parameters apply to the old generation only while for other GCs like G1 and ParallelGC they apply to the whole heap.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;MinHeapFreeRatio&lt;/code&gt; (displayed as &lt;code&gt;minimum_free_percentage&lt;/code&gt; in the GC log) defaults to 40% and &lt;code&gt;MaxHeapFreeRatio&lt;/code&gt; (shown as &lt;code&gt;maximum_free_percentage&lt;/code&gt; in the log) defaults to 70%. After this full GC cycle the used part of Tenured has dropped from &lt;mark&gt;528963k&lt;/mark&gt; to &lt;mark class=&quot;level1&quot;&gt;27353.2k&lt;/mark&gt; which leads to a free ratio of 96% (i.e. (699072k - 27353.2k) / 699072k == 0.96%). In order to compute the new size of Tenured after this GC we have to take into account that our &lt;code&gt;maximum_free_percentage&lt;/code&gt; is 70%. So we set the currently &lt;code&gt;used_after_gc&lt;/code&gt; amount (i.e. 27353.2k) to 30% and compute the desired size of Tenured to &lt;mark class=&quot;level2&quot;&gt;91177.4k&lt;/mark&gt; (i.e. 27353.2k / 0.30 == 91177.4). Notice that the minimal shrunken size of Tenured (i.e. &lt;code&gt;minimum_desired_capacity&lt;/code&gt;) has a lower bound of 68288k which is the initially computed size of Tenured for a heap size of 100m.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This means that we could shrink Tenured after this GC cycle by 699072k - 91177k == 607895k. However, in order to avoid repetitive shrink/expand cycles, the JVM additionally damps the shrink amount (i.e. &lt;code&gt;shrink_bytes&lt;/code&gt;) by a series of hard-coded shrink factors which start at 0% and increase from 10% to 40% and finally 100%. Because the initial shrink factor is 0% &lt;code&gt;shrink_bytes&lt;/code&gt; evaluates to 0k which that means no heap reduction will happen after this GC. In the end, although this full GC has collected ~500m of garbage, the RSS footprint of the Java process remains almost unchanged at ~600m.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we press &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; one more time, the second &lt;code&gt;System.gc()&lt;/code&gt; will be triggered after we&amp;#8217;ve unlinked the 512m of allocated memory:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code&gt;GC(26) Heap before GC invocations=22 (full 6):
GC(26)  def new generation   total 30720K, used 534K [0x00000000c0000000, 0x00000000c2150000, 0x00000000d5550000)
GC(26)   eden space 27328K,   1% used [0x00000000c0000000, 0x00000000c0085bb8, 0x00000000c1ab0000)
GC(26)   from space 3392K,   0% used [0x00000000c1ab0000, 0x00000000c1ab0000, 0x00000000c1e00000)
GC(26)   to   space 3392K,   0% used [0x00000000c1e00000, 0x00000000c1e00000, 0x00000000c2150000)
GC(26)  tenured generation   total 699072K, used 27353K [0x00000000d5550000, 0x0000000100000000, 0x0000000100000000)
GC(26)    the space 699072K,   3% used [0x00000000d5550000, 0x00000000d70064e0, 0x00000000d7006600, 0x0000000100000000)

&lt;span class=&quot;hll&quot;&gt;GC(26) CardGeneration::compute_new_size:
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(26)     minimum_free_percentage:   0,40  maximum_used_percentage:   0,60
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(26)      free_after_gc   : 671718,4K   used_after_gc   : 27353,6K   capacity_after_gc   : 699072,0K
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(26)      free_percentage:   0,96
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(26)     maximum_free_percentage:   0,70  minimum_used_percentage:   0,30
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(26)     _capacity_at_prologue: 699072,0K  minimum_desired_capacity: 68288,0K  maximum_desired_capacity: 91178,7K
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(26)     shrinking:  initSize: 68288,0K  maximum_desired_capacity: &lt;mark&gt;91178,7K&lt;/mark&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(26)     shrink_bytes: &lt;mark class=&quot;level2&quot;&gt;60789,3K&lt;/mark&gt;  current_shrink_factor: &lt;mark class=&quot;level1&quot;&gt;10&lt;/mark&gt;  new shrink factor: 40  _min_heap_delta_bytes: 192,0K
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(26) Shrinking tenured generation from 699072K to 638284K
&lt;/span&gt;
GC(26) DefNew: 534K(30720K)-&amp;gt;0K(30720K) Eden: 534K(27328K)-&amp;gt;0K(27328K) From: 0K(3392K)-&amp;gt;0K(3392K)
GC(26) Tenured: 27353K(699072K)-&amp;gt;27353K(638284K)

GC(26) Heap after GC invocations=23 (full 7):
GC(26)  def new generation   total 30720K, used 0K [0x00000000c0000000, 0x00000000c2150000, 0x00000000d5550000)
GC(26)   eden space 27328K,   0% used [0x00000000c0000000, 0x00000000c0000000, 0x00000000c1ab0000)
GC(26)   from space 3392K,   0% used [0x00000000c1ab0000, 0x00000000c1ab0000, 0x00000000c1e00000)
GC(26)   to   space 3392K,   0% used [0x00000000c1e00000, 0x00000000c1e00000, 0x00000000c2150000)
GC(26)  tenured generation   total 638284K, used 27353K [0x00000000d5550000, 0x00000000fc4a3000, 0x0000000100000000)
GC(26)    the space 638284K,   4% used [0x00000000d5550000, 0x00000000d7006678, 0x00000000d7006800, 0x00000000fc4a3000)
Performed 2. System.gc()

VmRSS:	  604028 kB
Press &amp;lt;Enter&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time the &lt;code&gt;maximum_desired_capacity&lt;/code&gt; is &lt;mark&gt;91178.7k&lt;/mark&gt; which, together with the new shrink factor of &lt;mark class=&quot;level1&quot;&gt;10%&lt;/mark&gt;, allows us to shrink (i.e. uncommit) the Tenured heap by &lt;mark class=&quot;level2&quot;&gt;60789.3k&lt;/mark&gt; (i.e. (699072k - 91178.7k) * 0.10 == 607893.3k * 0.10 == 60789.3k). Notice that although we&amp;#8217;ve uncommitted ~60m of old heap, the RSS footprint of the process still remains unchanged at ~600m. This is because the 60m memory which we&amp;#8217;ve just uncommitted haven&amp;#8217;t been touched before so they did not increase the memory footprint of the Java process. We can verify this by running &lt;code&gt;pmap&lt;/code&gt;. After the previous, 6th full GC, the memory layout of the heap looked as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;Address           Kbytes     RSS   Dirty Mode  Mapping
00000000c0000000   34112   34112   34112 rw---   [ anon ]
00000000c2150000  315392       0       0 -----   [ anon ]
00000000d5550000  699072  528976  528976 rw---   [ anon ]  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see that the whole 699072k Tenured generation is committed, but only 528976k are dirty &lt;code class=&quot;callout&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/code&gt;(i.e. have been touched). After the latest, 7th &lt;code&gt;System.gc()&lt;/code&gt;, the &lt;code&gt;pmap&lt;/code&gt; output looks as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;Address           Kbytes     RSS   Dirty Mode  Mapping
00000000c0000000   34112   34112   34112 rw---   [ anon ]
00000000c2150000  315392       0       0 -----   [ anon ]
00000000d5550000  638284  528976  528976 rw---   [ anon ]  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
00000000d90ad000   60788       0       0 -----   [ anon ]  &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, 60788k (i.e. 60789.3k aligned down to 4k pages) have now been uncommitted &lt;code class=&quot;callout&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/code&gt;, but the number of dirty pages remains the same &lt;code class=&quot;callout&quot;&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/code&gt;. Uncommitting has no impact on the RSS footprint in this case. Let&amp;#8217;s see what happens if we trigger yet another &lt;code&gt;System.gc()&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code&gt;GC(27) Heap before GC invocations=23 (full 7):
GC(27)  def new generation   total 30720K, used 534K [0x00000000c0000000, 0x00000000c2150000, 0x00000000d5550000)
GC(27)   eden space 27328K,   1% used [0x00000000c0000000, 0x00000000c0085bc0, 0x00000000c1ab0000)
GC(27)   from space 3392K,   0% used [0x00000000c1ab0000, 0x00000000c1ab0000, 0x00000000c1e00000)
GC(27)   to   space 3392K,   0% used [0x00000000c1e00000, 0x00000000c1e00000, 0x00000000c2150000)
GC(27)  tenured generation   total 638284K, used &lt;mark&gt;27354K&lt;/mark&gt; [0x00000000d5550000, 0x00000000fc4a3000, 0x0000000100000000)
GC(27)    the space 638284K,   4% used [0x00000000d5550000, 0x00000000d70068a8, 0x00000000d7006a00, 0x00000000fc4a3000)

&lt;span class=&quot;hll&quot;&gt;GC(27) CardGeneration::compute_new_size:
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(27)     minimum_free_percentage:   0,40  maximum_used_percentage:   0,60
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(27)      free_after_gc   : 637481,5K   used_after_gc   :  802,5K   capacity_after_gc   : 638284,0K
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(27)      free_percentage:   1,00
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(27)     maximum_free_percentage:   0,70  minimum_used_percentage:   0,30
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(27)     _capacity_at_prologue: 638284,0K  minimum_desired_capacity: 68288,0K  maximum_desired_capacity: 68288,0K
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(27)     shrinking:  initSize: 68288,0K  maximum_desired_capacity: &lt;mark class=&quot;level1&quot;&gt;68288,0K&lt;/mark&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(27)     shrink_bytes: &lt;mark class=&quot;level2&quot;&gt;227998,4K&lt;/mark&gt;  current_shrink_factor: &lt;mark class=&quot;level2&quot;&gt;40&lt;/mark&gt;  new shrink factor: 100  _min_heap_delta_bytes: 192,0K
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(27) Shrinking tenured generation from 638284K to 410288K
&lt;/span&gt;
GC(27) DefNew: 534K(30720K)-&amp;gt;0K(30720K) Eden: 534K(27328K)-&amp;gt;0K(27328K) From: 0K(3392K)-&amp;gt;0K(3392K)
GC(27) Tenured: &lt;mark&gt;27354K&lt;/mark&gt;(638284K)-&amp;gt;&lt;mark&gt;802K&lt;/mark&gt;(410288K)

GC(27) Heap after GC invocations=24 (full 8):
GC(27)  def new generation   total 30720K, used 0K [0x00000000c0000000, 0x00000000c2150000, 0x00000000d5550000)
GC(27)   eden space 27328K,   0% used [0x00000000c0000000, 0x00000000c0000000, 0x00000000c1ab0000)
GC(27)   from space 3392K,   0% used [0x00000000c1ab0000, 0x00000000c1ab0000, 0x00000000c1e00000)
GC(27)   to   space 3392K,   0% used [0x00000000c1e00000, 0x00000000c1e00000, 0x00000000c2150000)
GC(27)  tenured generation   total 410288K, used &lt;mark&gt;802K&lt;/mark&gt; [0x00000000d5550000, 0x00000000ee5fc000, 0x0000000100000000)
GC(27)    the space 410288K,   0% used [0x00000000d5550000, 0x00000000d56189d8, 0x00000000d5618a00, 0x00000000ee5fc000)
Performed 3. System.gc()

VmRSS:	  484636 kB
Press &amp;lt;Enter&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This time, occupancy of Tenured after the GC has dropped from &lt;mark&gt;27354k&lt;/mark&gt; to &lt;mark&gt;802k&lt;/mark&gt;. This means that we could potentially further shrink Tenured down to 2675k (i.e. 802.5 / 0.3 == 2675k) but because we have to respect the initial Tenured size as lower bound &lt;code&gt;maximum_desired_capacity&lt;/code&gt; becomes &lt;mark class=&quot;level1&quot;&gt;68288k&lt;/mark&gt; which is equal to &lt;code&gt;minimum_desired_capacity&lt;/code&gt;. Together with the new shrink factor of &lt;mark class=&quot;level2&quot;&gt;40%&lt;/mark&gt; this allows us to shrink the old heap by another &lt;mark class=&quot;level2&quot;&gt;227998.4k&lt;/mark&gt; (i.e. (638284k - 68288k) * 0.4 = 227998.4k). We can see that the RSS footprint of the process has now finally dropped from ~600m down to ~480m. This is still less than the ~220m we&amp;#8217;ve shrunken the heap, but we know by now that it&amp;#8217;s not the amount of uncommitted memory which is crucial, but the amount of &lt;em&gt;dirty&lt;/em&gt; memory we&amp;#8217;ve uncommitted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The previous &lt;code&gt;pmap&lt;/code&gt; output after the 7th full GC looked as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;Address           Kbytes     RSS   Dirty Mode  Mapping
00000000c0000000   34112   34112   34112 rw---   [ anon ]
00000000c2150000  315392       0       0 -----   [ anon ]
00000000d5550000  638284  &lt;mark class=&quot;level1&quot;&gt;528976&lt;/mark&gt;  528976 rw---   [ anon ]
00000000d90ad000   &lt;mark&gt;60788&lt;/mark&gt;       0       0 -----   [ anon ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comparing the previous memory map with the current one confirms these results:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;Address           Kbytes     RSS   Dirty Mode  Mapping
00000000c0000000   34112   34112   34112 rw---   [ anon ]
00000000c2150000  315392       0       0 -----   [ anon ]
00000000d5550000  410288  &lt;mark class=&quot;level1&quot;&gt;410288&lt;/mark&gt;  410288 rw---   [ anon ]
00000000ee5fc000  &lt;mark&gt;288784&lt;/mark&gt;       0       0 -----   [ anon ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve uncommitted an additional amount of 227996k (i.e. &lt;mark&gt;288784k&lt;/mark&gt; - &lt;mark&gt;60788k&lt;/mark&gt; == 227996k) which corresponds exactly to &lt;code&gt;shrink_bytes&lt;/code&gt; aligned down to 4k pages. And this time, out of the 227996k uncommitted memory, 118688k (i.e. &lt;mark class=&quot;level1&quot;&gt;528976k&lt;/mark&gt; - &lt;mark class=&quot;level1&quot;&gt;410288k&lt;/mark&gt; == 118688k) have been dirty which correlates quite well with the observed decrease in the proecss' RSS usage from 604028k down to 484636k (i.e. 604028k - 484636k == 119392k).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the 4th &lt;code&gt;System.gc()&lt;/code&gt; we&amp;#8217;re finally down the initial Tenured size of &lt;mark&gt;68288k&lt;/mark&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code&gt;GC(28) Heap before GC invocations=24 (full 8):
GC(28)  def new generation   total 30720K, used 808K [0x00000000c0000000, 0x00000000c2150000, 0x00000000d5550000)
GC(28)   eden space 27328K,   2% used [0x00000000c0000000, 0x00000000c00ca0f8, 0x00000000c1ab0000)
GC(28)   from space 3392K,   0% used [0x00000000c1ab0000, 0x00000000c1ab0000, 0x00000000c1e00000)
GC(28)   to   space 3392K,   0% used [0x00000000c1e00000, 0x00000000c1e00000, 0x00000000c2150000)
GC(28)  tenured generation   total 410288K, used 802K [0x00000000d5550000, 0x00000000ee5fc000, 0x0000000100000000)
GC(28)    the space 410288K,   0% used [0x00000000d5550000, 0x00000000d56189d8, 0x00000000d5618a00, 0x00000000ee5fc000)

&lt;span class=&quot;hll&quot;&gt;GC(28) CardGeneration::compute_new_size:
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(28)     minimum_free_percentage:   0,40  maximum_used_percentage:   0,60
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(28)      free_after_gc   : 409485,2K   used_after_gc   :  802,8K   capacity_after_gc   : 410288,0K
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(28)      free_percentage:   1,00
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(28)     maximum_free_percentage:   0,70  minimum_used_percentage:   0,30
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(28)     _capacity_at_prologue: 410288,0K  minimum_desired_capacity: 68288,0K  maximum_desired_capacity: 68288,0K
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(28)     shrinking:  initSize: 68288,0K  maximum_desired_capacity: 68288,0K
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(28)     shrink_bytes: 342000,0K  current_shrink_factor: 100  new shrink factor: 100  _min_heap_delta_bytes: 192,0K
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;GC(28) Shrinking tenured generation from 410288K to &lt;mark&gt;68288K&lt;/mark&gt;
&lt;/span&gt;
GC(28) DefNew: 808K(30720K)-&amp;gt;0K(30720K) Eden: 808K(27328K)-&amp;gt;0K(27328K) From: 0K(3392K)-&amp;gt;0K(3392K)
GC(28) Tenured: 802K(410288K)-&amp;gt;802K(&lt;mark&gt;68288K&lt;/mark&gt;)

GC(28) Heap after GC invocations=25 (full 9):
GC(28)  def new generation   total 30720K, used 0K [0x00000000c0000000, 0x00000000c2150000, 0x00000000d5550000)
GC(28)   eden space 27328K,   0% used [0x00000000c0000000, 0x00000000c0000000, 0x00000000c1ab0000)
GC(28)   from space 3392K,   0% used [0x00000000c1ab0000, 0x00000000c1ab0000, 0x00000000c1e00000)
GC(28)   to   space 3392K,   0% used [0x00000000c1e00000, 0x00000000c1e00000, 0x00000000c2150000)
GC(28)  tenured generation   total &lt;mark&gt;68288K&lt;/mark&gt;, used 802K [0x00000000d5550000, 0x00000000d9800000, 0x0000000100000000)
GC(28)    the space 68288K,   1% used [0x00000000d5550000, 0x00000000d5618b10, 0x00000000d5618c00, 0x00000000d9800000)
Performed 4. System.gc()

VmRSS:	  &lt;mark class=&quot;level1&quot;&gt;141304 kB&lt;/mark&gt;
Press &amp;lt;Enter&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The RSS footprint has significantly dropped down to &lt;mark class=&quot;level1&quot;&gt;~140m&lt;/mark&gt; but is still significantly higher compared to the ~40m before the allocation of 512m of data by the application. The output of &lt;code&gt;pmap&lt;/code&gt; shows that although the live set of Java objects in New and Tenured only requires ~800k of memory, both New and Tenured are now fully touched and dirty up to the amount of &lt;code&gt;InitialHeapSize&lt;/code&gt; (i.e. &lt;mark&gt;68288k&lt;/mark&gt; + &lt;mark&gt;34112k&lt;/mark&gt; == 102400k == 100m) and contribute with 100m to the RSS footprint of the process:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;Address           Kbytes     RSS   Dirty Mode  Mapping
00000000c0000000   34112   &lt;mark&gt;34112&lt;/mark&gt;   34112 rw---   [ anon ]
00000000c2150000  315392       0       0 -----   [ anon ]
00000000d5550000   68288   &lt;mark&gt;68288&lt;/mark&gt;   68288 rw---   [ anon ]
00000000d9800000  630784       0       0 -----   [ anon ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These 100m which correspond to the difference between the initial and the current memory usage won&amp;#8217;t go away, no matter how often we will call &lt;code&gt;System.gc()&lt;/code&gt; and no matter how low the heap consumption will decrease.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fine-tuning&quot;&gt;Fine tuning&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;xxalwayspretouch&quot;&gt;&lt;code&gt;-XX:+AlwaysPreTouch&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The fact that Linux by default lazily maps committed, virtual memory to real, physical memory only when the corresponding memory pages get actually touched is a nice optimization which helps to save memory and CPU cycles at startup. But it also comes at a cost. Depending on the &lt;a href=&quot;https://www.kernel.org/doc/Documentation/vm/overcommit-accounting&quot;&gt;memory overcommit settings&lt;/a&gt; an application might run into out of memory situations long time after it has reserved and committed the amount of memory it requires. Also, mapping virtual to physical pages on demand can cause unpredictable delays for certain memory accesses. To mitigate these drawbacks, the OpenJDK provides the &lt;code&gt;-XX:+AlwaysPreTouch&lt;/code&gt; option (off by default) which will immediately touch (i.e. map to phyiscal memory) all the committed heap and code cache parts right at JVM startup. Enabling &lt;code&gt;-XX:+AlwaysPreTouch&lt;/code&gt; slows done the startup a little bit but leads to more consistent and constant runtime behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Running our example &lt;code&gt;Uncommit&lt;/code&gt; application with &lt;code&gt;-XX:+AlwaysPreTouch&lt;/code&gt; will result in the following GC log output for the first &lt;code&gt;System.gc()&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;java &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:+UseSerialGC &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:InitialHeapSize&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100m &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:MaxHeapSize&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1g &lt;span class=&quot;nt&quot;&gt;-Xlog&lt;/span&gt;:gc+heap&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;trace::none &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;       &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:NewSizeThreadIncrease&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:+AlwaysPreTouch Uncommit
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0) Heap after GC invocations=1 (full 1):&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0)  def new generation   total 30720K, used 0K [0x00000000c0000000, 0x00000000c2150000, 0x00000000d5550000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0)   eden space 27328K,   0% used [0x00000000c0000000, 0x00000000c0000000, 0x00000000c1ab0000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0)   from space 3392K,   0% used [0x00000000c1ab0000, 0x00000000c1ab0000, 0x00000000c1e00000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0)   to   space 3392K,   0% used [0x00000000c1e00000, 0x00000000c1e00000, 0x00000000c2150000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0)  tenured generation   total 68288K, used 733K [0x00000000d5550000, 0x00000000d9800000, 0x0000000100000000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(0)    the space 68288K,   1% used [0x00000000d5550000, 0x00000000d5607500, 0x00000000d5607600, 0x00000000d9800000)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;VmRSS:	  &lt;mark&gt;147532&lt;/mark&gt; kB&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Compared to before when running with the default &lt;code&gt;-XX:-AlwaysPreTouch&lt;/code&gt; setting, the size and occupancy of New and Tenured are exactly the same, but the RSS footprint of the whole process has increased from ~40m to &lt;mark&gt;~147m&lt;/mark&gt;. Double checking with &lt;code&gt;pmap&lt;/code&gt; confirms, that the committed parts of New and Tenured have the same size like before with the only difference that they are now fully dirty (i.e. completely mapped to physical pages):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;Address           Kbytes     RSS   Dirty Mode  Mapping
00000000c0000000   &lt;mark&gt;34112&lt;/mark&gt;   &lt;mark&gt;34112&lt;/mark&gt;   34112 rw---   [ anon ]
00000000c2150000  315392       0       0 -----   [ anon ]
00000000d5550000   &lt;mark class=&quot;level1&quot;&gt;68288&lt;/mark&gt;   &lt;mark class=&quot;level1&quot;&gt;68288&lt;/mark&gt;   68288 rw---   [ anon ]
00000000d9800000  630784       0       0 -----   [ anon ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A careful reader might have observed that the fully touched heap only accounts for ~100m additional memory. The remaining ~7m of additional RSS memory originate from the Code Cache (used by the JIT compilers) which has now also been completely touched at startup. With &lt;code&gt;-XX:+AlwaysPreTouch&lt;/code&gt; the maximum RSS footprint of our example application will increase up to ~780m (compared to ~600m before) but than decrease back to the initial ~147m after calling &lt;code&gt;System.gc()&lt;/code&gt; four times.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;xx-shrinkheapinsteps&quot;&gt;&lt;code&gt;-XX:-ShrinkHeapInSteps&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we have seen in our example, it takes four full GC cycles with SerialGC to return all non-required heap memory back to the OS. The predefined shrink factors can help to avoid oscillating heap size changes but in some situations it might be beneficial if the the application itself could fully control when heap memory will be returned to the OS. Since jdk 9 this is possible with the new &lt;code&gt;-XX:-ShrinkHeapInSteps&lt;/code&gt; option which is on by default (see &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8146436&quot;&gt;JDK-8146436: Add -XX:-ShrinkHeapInSteps option&lt;/a&gt;). If &lt;code&gt;ShrinkHeapInSteps&lt;/code&gt; is disabled, a call to &lt;code&gt;System.gc()&lt;/code&gt; will always shrink the heap down right to the &lt;code&gt;maximum_desired_capacity&lt;/code&gt; (i.e. the shrink factor will always be 100%). With this option, we will get the following log for the first &lt;code&gt;System.gc()&lt;/code&gt; after the allocation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;java &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:+UseSerialGC &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:InitialHeapSize&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100m &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:MaxHeapSize&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1g &lt;span class=&quot;nt&quot;&gt;-Xlog&lt;/span&gt;:gc+heap&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;trace::none &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;       &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:NewSizeThreadIncrease&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:-ShrinkHeapInSteps Uncommit
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25) CardGeneration::compute_new_size:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)     minimum_free_percentage:   0,40  maximum_used_percentage:   0,60&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)      free_after_gc   : 671718,8K   used_after_gc   : 27353,2K   capacity_after_gc   : 699072,0K&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)      free_percentage:   0,96&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)     maximum_free_percentage:   0,70  minimum_used_percentage:   0,30&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)     _capacity_at_prologue: 699072,0K  &lt;mark&gt;minimum_desired_capacity: 68288,0K&lt;/mark&gt;  maximum_desired_capacity: 91177,4K&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)     shrinking:  initSize: 68288,0K  &lt;mark class=&quot;level1&quot;&gt;maximum_desired_capacity: 91177,4K&lt;/mark&gt;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)     shrink_bytes: 607894,6K  current_shrink_factor: 0  new shrink factor: 0  _min_heap_delta_bytes: 192,0K&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25) &lt;mark class=&quot;level2&quot;&gt;Shrinking tenured generation from 699072K to 91180K&lt;/mark&gt;&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;GC(25) DefNew: 14935K(30720K)-&amp;gt;0K(30720K) Eden: 11543K(27328K)-&amp;gt;0K(27328K) From: 3392K(3392K)-&amp;gt;0K(3392K)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25) Tenured: 528963K(699072K)-&amp;gt;27353K(91180K)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;GC(25) Heap after GC invocations=22 (full 6):&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)  def new generation   total 30720K, used 0K [0x00000000c0000000, 0x00000000c2150000, 0x00000000d5550000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)   eden space 27328K,   0% used [0x00000000c0000000, 0x00000000c0000000, 0x00000000c1ab0000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)   from space 3392K,   0% used [0x00000000c1ab0000, 0x00000000c1ab0000, 0x00000000c1e00000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)   to   space 3392K,   0% used [0x00000000c1e00000, 0x00000000c1e00000, 0x00000000c2150000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)  tenured generation   total 91180K, used 27353K [0x00000000d5550000, 0x00000000dae5b000, 0x0000000100000000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)    the space 91180K,  29% used [0x00000000d5550000, 0x00000000d70064e0, 0x00000000d7006600, 0x00000000dae5b000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Performed 1. System.gc()&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;VmRSS:	  165052 kB&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Press &amp;lt;Enter&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We still need a second full GC to shrink the heap to its initial size, because after the first one the computed &lt;code&gt;maximum_desired_capacity&lt;/code&gt; is still bigger than the &lt;code&gt;minimum_desired_capacity&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;GC(26) CardGeneration::compute_new_size:
GC(26)     minimum_free_percentage:   0,40  maximum_used_percentage:   0,60
GC(26)      free_after_gc   : 90378,1K   used_after_gc   :  801,9K   capacity_after_gc   : 91180,0K
GC(26)      free_percentage:   0,99
GC(26)     maximum_free_percentage:   0,70  minimum_used_percentage:   0,30
GC(26)     _capacity_at_prologue: 91180,0K  minimum_desired_capacity: 68288,0K  maximum_desired_capacity: 68288,0K
GC(26)     shrinking:  initSize: 68288,0K  maximum_desired_capacity: 68288,0K
GC(26)     shrink_bytes: 22892,0K  &lt;mark&gt;current_shrink_factor: 0&lt;/mark&gt;  &lt;mark&gt;new shrink factor: 0&lt;/mark&gt;  _min_heap_delta_bytes: 192,0K
GC(26) &lt;mark class=&quot;level2&quot;&gt;Shrinking tenured generation from 91180K to 68288K&lt;/mark&gt;

GC(26) DefNew: 534K(30720K)-&amp;gt;0K(30720K) Eden: 534K(27328K)-&amp;gt;0K(27328K) From: 0K(3392K)-&amp;gt;0K(3392K)
GC(26) Tenured: 27353K(91180K)-&amp;gt;801K(68288K)

GC(26) Heap after GC invocations=23 (full 7):
GC(26)  def new generation   total 30720K, used 0K [0x00000000c0000000, 0x00000000c2150000, 0x00000000d5550000)
GC(26)   eden space 27328K,   0% used [0x00000000c0000000, 0x00000000c0000000, 0x00000000c1ab0000)
GC(26)   from space 3392K,   0% used [0x00000000c1ab0000, 0x00000000c1ab0000, 0x00000000c1e00000)
GC(26)   to   space 3392K,   0% used [0x00000000c1e00000, 0x00000000c1e00000, 0x00000000c2150000)
GC(26)  tenured generation   total 68288K, used 801K [0x00000000d5550000, 0x00000000d9800000, 0x0000000100000000)
GC(26)    the space 68288K,   1% used [0x00000000d5550000, 0x00000000d56187a8, 0x00000000d5618800, 0x00000000d9800000)
Performed 2. System.gc()

VmRSS:	  142032 kB
Press &amp;lt;Enter&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice how both, the current and the new shrink factor are misleadingly printed as zero instead of 100 although we&amp;#8217;re running with &lt;code&gt;-XX:-ShrinkHeapInSteps&lt;/code&gt;. This issue will be fixed by &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8270100&quot;&gt;JDK-8270100&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;xxmaxheapfreeratio&quot;&gt;&lt;code&gt;-XX:MaxHeapFreeRatio&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we&amp;#8217;ve seen in the previous section, even with &lt;code&gt;-XX:-ShrinkHeapInSteps&lt;/code&gt; we still need two full GC cycles to return to the initial heap layout just before the temporary allocation of 512m. This is because after the first &lt;code&gt;System.gc()&lt;/code&gt; Tenured still contains 27353.2k of uncollected objects and in order to comply to the default setting of 70% &lt;code&gt;MaxHeapFreeRatio&lt;/code&gt; we can&amp;#8217;t shrink Tenured below 91177.4k (i.e. 27353.2k / (1 - 0.70) == 91177.4k). However, if we relax this requirement to just 50% &lt;code&gt;MaxHeapFreeRatio&lt;/code&gt; (i.e. 27353.2k / (1 - 0.50) == 54706.4k) we will be able to shrink Tenured back to its initial size right after the first full GC:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;java &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:+UseSerialGC &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:InitialHeapSize&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100m &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:MaxHeapSize&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1g &lt;span class=&quot;nt&quot;&gt;-Xlog&lt;/span&gt;:gc+heap&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;trace::none &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;       &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:NewSizeThreadIncrease&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:-ShrinkHeapInSteps &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:MaxHeapFreeRatio&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;50 Uncommit
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25) CardGeneration::compute_new_size:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)     minimum_free_percentage:   0,40  maximum_used_percentage:   0,60&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)      free_after_gc   : 671719,0K   used_after_gc   : 27353,0K   capacity_after_gc   : 699072,0K&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)      free_percentage:   0,96&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)     maximum_free_percentage:   0,50  minimum_used_percentage:   0,50&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)     _capacity_at_prologue: 699072,0K  minimum_desired_capacity: 68288,0K  maximum_desired_capacity: 68288,0K&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)     shrinking:  initSize: 68288,0K  maximum_desired_capacity: 68288,0K&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)     shrink_bytes: 630784,0K  current_shrink_factor: 0  new shrink factor: 0  _min_heap_delta_bytes: 192,0K&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25) &lt;mark&gt;Shrinking tenured generation from 699072K to 68288K&lt;/mark&gt;&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;GC(25) DefNew: 14926K(30720K)-&amp;gt;0K(30720K) Eden: 11534K(27328K)-&amp;gt;0K(27328K) From: 3392K(3392K)-&amp;gt;0K(3392K)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25) Tenured: 529002K(699072K)-&amp;gt;27352K(68288K)&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;GC(25) Heap after GC invocations=22 (full 6):&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)  def new generation   total 30720K, used 0K [0x00000000c0000000, 0x00000000c2150000, 0x00000000d5550000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)   eden space 27328K,   0% used [0x00000000c0000000, 0x00000000c0000000, 0x00000000c1ab0000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)   from space 3392K,   0% used [0x00000000c1ab0000, 0x00000000c1ab0000, 0x00000000c1e00000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)   to   space 3392K,   0% used [0x00000000c1e00000, 0x00000000c1e00000, 0x00000000c2150000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)  tenured generation   total 68288K, used 27352K [0x00000000d5550000, 0x00000000d9800000, 0x0000000100000000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(25)    the space 68288K,  40% used [0x00000000d5550000, 0x00000000d70063e0, 0x00000000d7006400, 0x00000000d9800000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Performed 1. System.gc()&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;VmRSS:	  141464 kB&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Press &amp;lt;Enter&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Choosing a smaller value for &lt;code&gt;MaxHeapFreeRatio&lt;/code&gt; allows more memory to be freed from Tenured and returned back to the OS. However, the smaller we choose it, the fewer head room we leave in Tenured. This can lead to more frequent heap expansions afterwards if new allocations require more memory. We also have to ensure that &lt;code&gt;MaxHeapFreeRatio&lt;/code&gt; is greater than or equal to &lt;code&gt;MinHeapFreeRatio&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;xxinitialheapsize&quot;&gt;&lt;code&gt;-XX:InitialHeapSize&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With all the current tuning we still can&amp;#8217;t reach an RSS footprint below ~140m. This is still ~100m more than to initial RSS size before the temporary allocation of 512m of data. The reason for this difference is the fact that even though we&amp;#8217;ve returned all unused Java heap memory to the OS, the remaining committed part of the heap remains completely touched (i.e. mapped to physical memory). However, if we know that our application has temporary allocation spikes (like the allocation of 512m in our example programm) but in general runs just fine with a much smaller heap, we can easily configure a significantly smaller &lt;code&gt;InitialHeapSize&lt;/code&gt;. If we experimentally set &lt;code&gt;InitialHeapSize&lt;/code&gt; to just 1m and both, &lt;code&gt;MinHeapFreeRatio&lt;/code&gt; and &lt;code&gt;MaxHeapFreeRatio&lt;/code&gt; to 10% we will get the following behavior:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;hll&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;java &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:+UseSerialGC &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:InitialHeapSize&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1m &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:MaxHeapSize&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1g &lt;span class=&quot;nt&quot;&gt;-Xlog&lt;/span&gt;:gc+heap&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;trace::none &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;       &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:NewSizeThreadIncrease&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:-ShrinkHeapInSteps &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;hll&quot;&gt;       &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:MinHeapFreeRatio&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10 &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt;:MaxHeapFreeRatio&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10 Uncommit
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Calling System.gc()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(1) Heap after GC invocations=2 (full 1):&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(1)  def new generation   total 1152K, used 0K [0x00000000c0000000, 0x00000000c0140000, 0x00000000d5550000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(1)   eden space &lt;mark&gt;1024K&lt;/mark&gt;,   0% used [0x00000000c0000000, 0x00000000c0000000, 0x00000000c0100000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(1)   from space &lt;mark&gt;128K&lt;/mark&gt;,   0% used [0x00000000c0120000, 0x00000000c0120000, 0x00000000c0140000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(1)   to   space &lt;mark&gt;128K&lt;/mark&gt;,   0% used [0x00000000c0100000, 0x00000000c0100000, 0x00000000c0120000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(1)  tenured generation   total 768K, used 736K [0x00000000d5550000, 0x00000000d5610000, 0x0000000100000000)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;GC(1)    the space &lt;mark class=&quot;level1&quot;&gt;768K&lt;/mark&gt;,  95% used [0x00000000d5550000, 0x00000000d56080b8, 0x00000000d5608200, 0x00000000d5610000)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;VmRSS:	   &lt;mark class=&quot;level2&quot;&gt;40288&lt;/mark&gt; kB&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Press &amp;lt;Enter&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before the allocation of 512m, the young generation is now just 1280k (i.e. &lt;mark&gt;1024k&lt;/mark&gt; + &lt;mark&gt;128k&lt;/mark&gt; + &lt;mark&gt;128k&lt;/mark&gt; = 1280k) and Tenured just &lt;mark class=&quot;level1&quot;&gt;768k&lt;/mark&gt;. Notice that the JVM already ran an implicit GC before we explicitly called &lt;code&gt;System.gc()&lt;/code&gt; for the first time to free some space in the small, one megabyte large initial heap. The overall RSS footprint of the process is still &lt;mark class=&quot;level2&quot;&gt;~40m&lt;/mark&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;GC(&lt;mark class=&quot;level1&quot;&gt;597&lt;/mark&gt;) Heap after GC invocations=555 (full &lt;mark class=&quot;level2&quot;&gt;44&lt;/mark&gt;):
GC(597)  def new generation   total 1152K, used 128K [0x00000000c0000000, 0x00000000c0140000, 0x00000000d5550000)
GC(597)   eden space 1024K,   0% used [0x00000000c0000000, 0x00000000c0000000, 0x00000000c0100000)
GC(597)   from space 128K, 100% used [0x00000000c0100000, 0x00000000c0120000, 0x00000000c0120000)
GC(597)   to   space 128K,   0% used [0x00000000c0120000, 0x00000000c0120000, 0x00000000c0140000)
GC(597)  tenured generation   total 584356K, used 542504K [0x00000000d5550000, 0x00000000f8ff9000, 0x0000000100000000)
GC(597)    the space 584356K,  92% used [0x00000000d5550000, 0x00000000f671a368, 0x00000000f671a400, 0x00000000f8ff9000)
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;Successfully allocated 512MB memory
VmRSS:	  &lt;mark&gt;584388 kB&lt;/mark&gt;

Press &amp;lt;Enter&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the allocation of 512m of data, the RSS usage of &lt;mark&gt;~580m&lt;/mark&gt; is slightly smaller compared to the ~600m before (with the default settings for &lt;code&gt;MinHeapFreeRatio&lt;/code&gt; and &lt;code&gt;MaxHeapFreeRatio&lt;/code&gt; and an &lt;code&gt;InitialHeapSize&lt;/code&gt; of 100m). However, notice how with these somehow &lt;em&gt;extreme&lt;/em&gt; settings, the JVM already had to run &lt;mark class=&quot;level1&quot;&gt;597&lt;/mark&gt; implicit garbage collections (out of which &lt;mark class=&quot;level2&quot;&gt;44&lt;/mark&gt; were full GCs) to allow the allocation of 512m data. With the default settings and 100m &lt;code&gt;InitialHeapSize&lt;/code&gt; only 24 implicit GCs (with 5 full ones) were necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other hand, the first full GC after the allocation (i.e. &lt;mark class=&quot;level2&quot;&gt;full 45&lt;/mark&gt;) now instantly reduces the RSS footprint back to &lt;mark&gt;~42m&lt;/mark&gt; which is only minimally higher compared to the ~40m before the allocation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight nowrap&quot;&gt;&lt;code data-lang=&quot;console&quot;&gt;&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;GC(598) Shrinking tenured generation from 584356K to 2712K
GC(598) DefNew: 1110K(1152K)-&amp;gt;0K(1152K) Eden: 982K(1024K)-&amp;gt;0K(1024K) From: 128K(128K)-&amp;gt;0K(128K)
GC(598) Tenured: 542504K(584356K)-&amp;gt;2439K(2712K)
GC(598) Heap after GC invocations=556 (&lt;mark class=&quot;level2&quot;&gt;full 45&lt;/mark&gt;):
GC(598)  def new generation   total 1152K, used 0K [0x00000000c0000000, 0x00000000c0140000, 0x00000000d5550000)
GC(598)   eden space 1024K,   0% used [0x00000000c0000000, 0x00000000c0000000, 0x00000000c0100000)
GC(598)   from space 128K,   0% used [0x00000000c0100000, 0x00000000c0100000, 0x00000000c0120000)
GC(598)   to   space 128K,   0% used [0x00000000c0120000, 0x00000000c0120000, 0x00000000c0140000)
GC(598)  tenured generation   total 2712K, used 2439K [0x00000000d5550000, 0x00000000d57f6000, 0x0000000100000000)
GC(598)    the space 2712K,  89% used [0x00000000d5550000, 0x00000000d57b1d40, 0x00000000d57b1e00, 0x00000000d57f6000)
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;span class=&quot;go&quot;&gt;Performed 1. System.gc()

VmRSS:	   &lt;mark&gt;42660 kB&lt;/mark&gt;
Press &amp;lt;Enter&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the end, we can tune Serial GC to either always consume just the absolutely required minimum heap memory (which results in increased CPU usage due to more frequent GCs) or to favor fewer GC cycles at the expense of a higher memory footprint. It&amp;#8217;s up to the user to choose the right balance for his application and runtime environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve also seen that configuring and tuning the JVM can be quite tricky. Always make sure that the numbers you measure really match up, never believe just a single source of information and always try to double check your results at different levels with different tools :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;command-line-options&quot;&gt;Appendix A: Command Line Options&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Default Value&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MinHeapSize&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;0&lt;/code&gt; (i.e. &lt;em&gt;ergonomic&lt;/em&gt;)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Minimum heap size in bytes.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;InitialHeapSize&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;0&lt;/code&gt; (i.e. &lt;em&gt;ergonomic&lt;/em&gt;)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Initial heap size in bytes.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MaxHeapSize&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;96m&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Initial heap size in bytes.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Volker Simonis</name></author><category term="openjdk" /></entry></feed>